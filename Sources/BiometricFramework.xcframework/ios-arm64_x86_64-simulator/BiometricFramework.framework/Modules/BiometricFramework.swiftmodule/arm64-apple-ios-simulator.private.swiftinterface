// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BiometricFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
@_exported import BiometricFramework
import CoreGraphics
import CoreImage
import CoreVideo
import Foundation
import Photos
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum Yolov5 {
}
@objc @_hasMissingDesignatedInitializers public class ModelDataHandler : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UIUtilities {
  public static func addCircle(atPoint point: CoreFoundation.CGPoint, to view: UIKit.UIView, color: UIKit.UIColor, radius: CoreFoundation.CGFloat)
  public static func addRectangle(_ rectangle: CoreFoundation.CGRect, to view: UIKit.UIView, color: UIKit.UIColor)
  public static func addShape(withPoints points: [Foundation.NSValue]?, to view: UIKit.UIView, color: UIKit.UIColor)
  public static func imageOrientation(fromDevicePosition devicePosition: AVFoundation.AVCaptureDevice.Position = .back) -> UIKit.UIImage.Orientation
  public static func createUIImage(from imageBuffer: CoreVideo.CVImageBuffer, orientation: UIKit.UIImage.Orientation) -> UIKit.UIImage?
  public static func createImageBuffer(from image: UIKit.UIImage) -> CoreVideo.CVImageBuffer?
  public static func rotate(image: UIKit.UIImage, degree: Swift.Int) -> UIKit.UIImage?
  public static func masking(image: UIKit.UIImage, rect: CoreFoundation.CGRect) -> UIKit.UIImage?
  @objc deinit
}
public protocol CameraFeedManagerDelegate : AnyObject {
  func didOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
  func presentCameraPermissionsDeniedAlert()
  func presentVideoConfigurationErrorAlert()
  func sessionRunTimeErrorOccurred()
  func sessionWasInterrupted(canResumeManually resumeManually: Swift.Bool)
  func sessionInterruptionEnded()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PreviewView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol BiometricViewControllerDelegate : AnyObject {
  func sendDataBack(data: Swift.String, code: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BiometricVC : BiometricFramework.BaseVC {
  @_Concurrency.MainActor(unsafe) weak public var delegate: BiometricFramework.BiometricViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var name: Swift.String
  @_Concurrency.MainActor(unsafe) public var nic: Swift.String
  @_Concurrency.MainActor(unsafe) public var issueDate: Swift.String
  @_Concurrency.MainActor(unsafe) public var mobileNo: Swift.String
  @_Concurrency.MainActor(unsafe) public var area: Swift.String
  @_Concurrency.MainActor(unsafe) public var hand: Swift.String
  @_Concurrency.MainActor(unsafe) public var processId: Swift.String
  @_Concurrency.MainActor(unsafe) public var isDebugMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var modelDataHandler: BiometricFramework.ModelDataHandler?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BiometricFramework.BiometricVC : BiometricFramework.CameraFeedManagerDelegate {
  @_Concurrency.MainActor(unsafe) public func didOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
  @_Concurrency.MainActor(unsafe) public func sessionRunTimeErrorOccurred()
  @_Concurrency.MainActor(unsafe) public func sessionWasInterrupted(canResumeManually resumeManually: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func sessionInterruptionEnded()
  @_Concurrency.MainActor(unsafe) public func presentVideoConfigurationErrorAlert()
  @_Concurrency.MainActor(unsafe) public func presentCameraPermissionsDeniedAlert()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PreviewViewController : BiometricFramework.BaseVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
